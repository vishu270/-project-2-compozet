import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stopwatch with Pause',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color.fromARGB(255, 175, 21, 21)),
        useMaterial3: true,
      ),         
        home: const StopwatchPage(),
    );
  }
}

class StopwatchPage extends StatefulWidget {
  const StopwatchPage({super.key});

  @override
  State<StopwatchPage> createState() => _StopwatchPageState();
}

class _StopwatchPageState extends State<StopwatchPage> {
  late Stopwatch _stopwatch;
  late Ticker _ticker;
  Duration _elapsed = Duration.zero;
  bool _isRunning = false;

  @override
  void initState() {
    super.initState();
    _stopwatch = Stopwatch();
    _ticker = Ticker();
    _ticker.addListener(() {
      setState(() {
        _elapsed = _stopwatch.elapsed;
      });
    });
  }

  void _startStopwatch() {
    if (!_stopwatch.isRunning) {
      _stopwatch.start();
      _ticker.start();
      setState(() {
        _isRunning = true;
      });
    }
  }

  void _pauseStopwatch() {
    if (_stopwatch.isRunning) {
      _stopwatch.stop();
      _ticker.stop();
      setState(() {
        _isRunning = false;
      });
    }
  }

  void _resetStopwatch() {
    _stopwatch.reset();
    _ticker.stop();
    setState(() {
      _elapsed = Duration.zero;
      _isRunning = false;
    });
  }

  String _formatDuration(Duration duration) {
    final int hours = duration.inHours;
    final int minutes = duration.inMinutes.remainder(60);
    final int seconds = duration.inSeconds.remainder(60);
    final int milliseconds = duration.inMilliseconds.remainder(1000) ~/ 10;

    return '${hours.toString().padLeft(2, '0')}:'
        '${minutes.toString().padLeft(2, '0')}:'
        '${seconds.toString().padLeft(2, '0')}.'
        '${milliseconds.toString().padLeft(2, '0')}';
  }

  @override
  void dispose() {
    _ticker.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Stopwatch with Pause'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              _formatDuration(_elapsed),
              style: const TextStyle(fontSize: 48, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: _startStopwatch,
                  child: const Text('Start'),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _pauseStopwatch,
                  child: const Text('Pause'),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _resetStopwatch,
                  child: const Text('Reset'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class Ticker {
  final Duration tickDuration;
  VoidCallback? _listener;
  bool _isTicking = false;

  Ticker({this.tickDuration = const Duration(milliseconds: 100)});

  void addListener(VoidCallback listener) {
    _listener = listener;
  }

  void start() {
    if (!_isTicking && _listener != null) {
      _isTicking = true;
      _tick();
    }
  }

  void stop() {
    _isTicking = false;
  }

  void _tick() async {
    while (_isTicking) {
      await Future.delayed(tickDuration);
      if (_isTicking && _listener != null) {
        _listener!();
      }
    }
  }

  void dispose() {
    stop();
    _listener = null;
  }
}
